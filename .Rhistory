source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat|color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(),10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xCC
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green"),alpha=0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, 0.3))
cols <- brewer.pal(3, BuGn)
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv, method = "loess")
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(size = 4, alpha = 1/2, aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2)+geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim= c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim(-3,3))
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
?rbinom
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
trial
rle(trial)
rle(trial)$lengths
max(rle(trial)$lengths)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
maxRun
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
runLengths
mean(runLengths)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
mean(runLengths)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
mean(runLengths)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
runLengths
runLengths >= 8
sum(runLengths >= 8)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
avgLength
prob8orMore
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
avgLength
prob8orMore
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet2/PS2_6cd.R')
prob8orMore
library(swirl)
Sonia
swril()
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut
)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm")
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm", facets = .~cut)
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length =4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd, ]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
g <- ggplot(diamonds, aes(carat, price))
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
h = xyplot(weight ~ Time | Diet, BodyWeight)
type(h)
class(h)
axis()
panel.abline()
library(datasets)
data("airquality")
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~Month)
?geom
library(swirl)
swirl)
swirl()
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col = "blue")
abline(h=0.4, col = "red")
5
12
abline(h=0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, cm.colors(25))
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(u, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red","green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.r")
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$[,1:2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1]*svd1$d[1])%*%svd1$v[,1]
a1 <- (svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
h<-seq(0,30,0.1)
G <- (1/750)*(40*h - (1/2)*h^2)
plot(h,G)
plot(h,G, type = "l")
library(swril)
library(swirl)
swirl()
?pnorm
x <- seq(0,365,1)
plot(x, pnorm(x, 280, 8.5))
plot(x, pnorm(x, 280, 8.5), type = "l")
x <- seq(250, 300, 1)
plot(x, pnorm(x, 280, 8.5), type = "l")
x <- seq(200, 300, 1)
plot(x, pnorm(x, 280, 8.5), type = "l")
x <- seq(200, 400, 1)
plot(x, pnorm(x, 280, 8.5), type = "l")
x <- seq(200, 350, 1)
x <- seq(200, 400, 1)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
pnorm(6, mu, sd)
?qnorm
qnorm(0.05, mu, sd)
source('~/Desktop/Pre_Data_Science_Study/Statistics/ProblemSet3/PS3_6.r')
setwd("~/Desktop/Pre_Data_Science_Study/DataScience_and_ML/coursera_reproducibleResearch/NOAA_Storm_Analysis")
# load in libraries needed for analysis
library(dplyr)
library(ggplot2)
library(lubridate)
# read in raw data
dataNOAAraw <- read.csv("repdata-data-StormData.csv.bz2", header = TRUE)
str(dataNOAAraw)
?text
source('~/.active-rstudio-document', echo=TRUE)
library(grid)
grid.arrange
?grid.arrange
library(gridExtra)
?grid.arrange
topFatalities
fatPlot <- ggplot(topFatalities, aes(EVTYPE, totalFatalities)) + geom_bar(stat = "identity")
injPlot <- ggplot(topInjuries, aes(EVTYPE, totalInjuries)) + geom_bar(stat="identity")
grid.arrange(fatPlot, injPlot, 2)
grid.arrange(fatPlot, injPlot, nocl = 2)
?grid.arrange
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(totalFatalities = sum(FATALITIES)) %>% arrange(desc(totalFatalities)) %>% top_n(15)
topFatalities$TYPE = FATALITIES
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(totalInjuries = sum(INJURIES)) %>% arrange(desc(totalInjuries)) %>% top_n(15)
topInjuries$TYPE = INJURIES
popHealth <- rbind(topFatalities, topInjuries)
print(popHealth)
# Plot top 15 largest fatalities and injuries
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(totalFatalities = sum(FATALITIES)) %>% arrange(desc(totalFatalities)) %>% top_n(15)
topFatalities$TYPE = FATALITIES
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(totalInjuries = sum(INJURIES)) %>% arrange(desc(totalInjuries)) %>% top_n(15)
topInjuries$TYPE = INJURIES
popHealth <- rbind(topFatalities, topInjuries)
print(popHealth)
# Plot top 15 largest fatalities and injuries
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(totalFatalities = sum(FATALITIES)) %>% arrange(desc(totalFatalities)) %>% top_n(15)
topFatalities$TYPE = "FATALITIES"
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(totalInjuries = sum(INJURIES)) %>% arrange(desc(totalInjuries)) %>% top_n(15)
topInjuries$TYPE = "INJURIES"
popHealth <- rbind(topFatalities, topInjuries)
print(popHealth)
# Plot top 15 largest fatalities and injuries
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(totalFatalities = sum(FATALITIES)) %>% arrange(desc(totalFatalities)) %>% top_n(15)
topFatalities$TYPE = "FATALITIES"
print(topFatalities)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(totalInjuries = sum(INJURIES)) %>% arrange(desc(totalInjuries)) %>% top_n(15)
topInjuries$TYPE = "INJURIES"
popHealth <- rbind(topFatalities, topInjuries)
print(popHealth)
# Plot top 15 largest fatalities and injuries
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(totalFatalities = sum(FATALITIES)) %>% arrange(desc(totalFatalities)) %>% top_n(15)
topFatalities$TYPE = "FATALITIES"
print(topFatalities)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(totalInjuries = sum(INJURIES)) %>% arrange(desc(totalInjuries)) %>% top_n(15)
topInjuries$TYPE = "INJURIES"
print(topInjuries)
# popHealth <- rbind(topFatalities, topInjuries)
# print(popHealth)
# Plot top 15 largest fatalities and injuries
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(totalFatalities)) %>% top_n(15)
topFatalities$TYPE = "FATALITIES"
print(topFatalities)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(totalInjuries)) %>% top_n(15)
topInjuries$TYPE = "INJURIES"
print(topInjuries)
popHealth <- rbind(topFatalities, topInjuries)
print(popHealth)
# Plot top 15 largest fatalities and injuries
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
topFatalities$TYPE = "FATALITIES"
print(topFatalities)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
topInjuries$TYPE = "INJURIES"
print(topInjuries)
popHealth <- rbind(topFatalities, topInjuries)
print(popHealth)
# Plot top 15 largest fatalities and injuries
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
topFatalities$TYPE = "FATALITIES"
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
topInjuries$TYPE = "INJURIES"
popHealth <- rbind(topFatalities, topInjuries)
# Plot top 15 largest fatalities and injuries
g <- ggplot(popHealth, aes(EVTYPE, TOTAL))
g + geom_bar(stat="identity") + facet_grid(.~ TYPE)
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
library(gridExtra)
?weight
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
fatPlot <- qplot(EVTYPE, data = topFatalities, geom = "bar")
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
fatPlot <- qplot(EVTYPE, data = topFatalities, geom = "bar")
print(fatPlot)
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar")
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar")
print(fatPlot)
topFatalities
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(fatPlot)
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
injPlot <- qplot(EVTYPE, data = topInjuries, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
arrange.grid(fatPlot, injPlot)
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
library(gridExtra)
fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
injPlot <- qplot(EVTYPE, data = topInjuries, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
arrange.grid(fatPlot, injPlot)
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
library(gridExtra)
fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
injPlot <- qplot(EVTYPE, data = topInjuries, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(fatPlot, injPlot)
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
library(gridExtra)
fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
injPlot <- qplot(EVTYPE, data = topInjuries, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(fatPlot, injPlot, ncol = 2)
fatPlot
str(topFatalities)
topFatalities
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
library(gridExtra)
fatPlot <- qplot(factor(EVTYPE), data = topFatalities, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
injPlot <- qplot(EVTYPE, data = topInjuries, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(fatPlot, injPlot, ncol = 2)
topFatalities
levels(topFatalities$EVTYPE)
barplot(TOTAL, data = topFatalities)
barplot(topFatalities$TOTAL)
barplot(topFatalities$TOTAL, names.arg = EVTYPE)
barplot(topFatalities$TOTAL, names.arg = topFatalities$EVTYPE)
barplot(topFatalities$TOTAL, names.arg = topFatalities$EVTYPE)
barplot(topFatalities$TOTAL, names.arg = topFatalities$EVTYPE, las=2)
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
par(mfrow = c(1,2))
barplot(topFatalities$TOTAL, names.arg = topFatalities$EVTYPE, las=2)
barplot(topInjuries$TOTAL, names.arg = topInjuries$EVTYPE, las=2)
# library(gridExtra)
# fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# injPlot <- qplot(EVTYPE, data = topInjuries, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# grid.arrange(fatPlot, injPlot, ncol = 2)
par()
par(mar)
par()$mar
names(par)
par
par()
names(par())
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
par(mfrow = c(1,2))
barplot(topFatalities$TOTAL, names.arg = topFatalities$EVTYPE, las=2, cex.axis = 1)
barplot(topInjuries$TOTAL, names.arg = topInjuries$EVTYPE, las=2)
# library(gridExtra)
# fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# injPlot <- qplot(EVTYPE, data = topInjuries, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# grid.arrange(fatPlot, injPlot, ncol = 2)
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
par(mfrow = c(1,2))
barplot(topFatalities$TOTAL, names.arg = topFatalities$EVTYPE, las=2, cex.names = 1)
barplot(topInjuries$TOTAL, names.arg = topInjuries$EVTYPE, las=2)
# library(gridExtra)
# fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# injPlot <- qplot(EVTYPE, data = topInjuries, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# grid.arrange(fatPlot, injPlot, ncol = 2)
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
par(mfrow = c(1,2))
barplot(topFatalities$TOTAL, names.arg = topFatalities$EVTYPE, las=2, cex.names = 2)
barplot(topInjuries$TOTAL, names.arg = topInjuries$EVTYPE, las=2)
# library(gridExtra)
# fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# injPlot <- qplot(EVTYPE, data = topInjuries, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# grid.arrange(fatPlot, injPlot, ncol = 2)
# Group the data by weather event and sum the number of fatalities and take only the top 15
topFatalities <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(FATALITIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
# Group the data by weather event and sum the number of injuries and take only the top 15
topInjuries <- dataNOAAreduced %>% group_by(EVTYPE) %>% summarise(TOTAL = sum(INJURIES)) %>% arrange(desc(TOTAL)) %>% top_n(15)
par(mfrow = c(1,2))
barplot(topFatalities$TOTAL, names.arg = topFatalities$EVTYPE, las=2, cex.names = 0.75)
barplot(topInjuries$TOTAL, names.arg = topInjuries$EVTYPE, las=2)
# library(gridExtra)
# fatPlot <- qplot(EVTYPE, data = topFatalities, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# injPlot <- qplot(EVTYPE, data = topInjuries, weight = TOTAL, geom = "bar") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# grid.arrange(fatPlot, injPlot, ncol = 2)
par$mar
par()$mar
par()$omar
?par
names(par())
par()$oma
names(par()))
names(par())
